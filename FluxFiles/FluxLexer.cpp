
// Generated from C:/Users/Corra/CLionProjects/Flux/FluxFiles/FluxLexer.g4 by ANTLR 4.13.2


#include "FluxLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct FluxLexerStaticData final {
  FluxLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FluxLexerStaticData(const FluxLexerStaticData&) = delete;
  FluxLexerStaticData(FluxLexerStaticData&&) = delete;
  FluxLexerStaticData& operator=(const FluxLexerStaticData&) = delete;
  FluxLexerStaticData& operator=(FluxLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag fluxlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<FluxLexerStaticData> fluxlexerLexerStaticData = nullptr;

void fluxlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (fluxlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(fluxlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<FluxLexerStaticData>(
    std::vector<std::string>{
      "CLASS", "EXTENDS", "PUBLIC", "PRIVATE", "SUPER", "THIS", "NEW", "EXPORT", 
      "IMPORT", "FROM", "STRUCT", "FUNC", "RETURN", "IF", "ELSEIF", "ELSE", 
      "WHILE", "DO", "BREAK", "CONTINUE", "FOR", "IN", "SWITCH", "CASE", 
      "DEFAULT", "TRY", "CATCH", "FINALLY", "CONST", "NUMBER_VAR", "STRING_VAR", 
      "BOOLEAN_VAR", "UPPERCASE_IDENTIFIER", "CLASS_IDENTIFIER", "IDENTIFIER", 
      "PRINT_FUNC", "RANGE_FUNC", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", 
      "MUL_ASSIGN", "DIV_ASSIGN", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", 
      "MOD", "POWER", "LESS", "GREATER", "LESS_EQUAL", "GREATER_EQUAL", 
      "EQUAL", "NOT_EQUAL", "AND", "OR", "NOT", "COMMA", "DOT", "SEMICOLON", 
      "COLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
      "BOOL_LIT", "INT_LIT", "DECIMAL_LIT", "STRING_LIT", "COMMENT", "BLOCK_COMMENT", 
      "WS", "ILLEGAL"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'class'", "'extends'", "'public'", "'private'", "'super'", "'this'", 
      "'new'", "'export'", "'import'", "'from'", "'struct'", "'func'", "'return'", 
      "'if'", "'elseif'", "'else'", "'while'", "'do'", "'break'", "'continue'", 
      "'for'", "'in'", "'switch'", "'case'", "'default'", "'try'", "'catch'", 
      "'finally'", "'const'", "'number'", "'string'", "'bool'", "", "", 
      "", "'print'", "'range'", "'='", "'+='", "'-='", "'*='", "'/='", "'+'", 
      "'-'", "'*'", "'/'", "'%'", "'**'", "'<'", "'>'", "'<='", "'>='", 
      "'=='", "'!='", "'&&'", "'||'", "'!'", "','", "'.'", "';'", "':'", 
      "'('", "')'", "'{'", "'}'", "'['", "']'"
    },
    std::vector<std::string>{
      "", "CLASS", "EXTENDS", "PUBLIC", "PRIVATE", "SUPER", "THIS", "NEW", 
      "EXPORT", "IMPORT", "FROM", "STRUCT", "FUNC", "RETURN", "IF", "ELSEIF", 
      "ELSE", "WHILE", "DO", "BREAK", "CONTINUE", "FOR", "IN", "SWITCH", 
      "CASE", "DEFAULT", "TRY", "CATCH", "FINALLY", "CONST", "NUMBER_VAR", 
      "STRING_VAR", "BOOLEAN_VAR", "UPPERCASE_IDENTIFIER", "CLASS_IDENTIFIER", 
      "IDENTIFIER", "PRINT_FUNC", "RANGE_FUNC", "ASSIGN", "ADD_ASSIGN", 
      "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "ADD", "SUBTRACT", "MULTIPLY", 
      "DIVIDE", "MOD", "POWER", "LESS", "GREATER", "LESS_EQUAL", "GREATER_EQUAL", 
      "EQUAL", "NOT_EQUAL", "AND", "OR", "NOT", "COMMA", "DOT", "SEMICOLON", 
      "COLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
      "BOOL_LIT", "INT_LIT", "DECIMAL_LIT", "STRING_LIT", "COMMENT", "BLOCK_COMMENT", 
      "WS", "ILLEGAL"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,75,522,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
  	3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,
  	1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
  	9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
  	11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,
  	14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
  	16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
  	19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,
  	22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
  	24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,
  	26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,
  	28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,
  	30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,5,32,345,8,32,10,32,12,32,348,9,
  	32,1,33,1,33,5,33,352,8,33,10,33,12,33,355,9,33,1,34,1,34,5,34,359,8,
  	34,10,34,12,34,362,9,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
  	1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,
  	1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
  	1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,
  	1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,57,1,57,
  	1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,
  	1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,
  	456,8,67,1,68,4,68,459,8,68,11,68,12,68,460,1,69,4,69,464,8,69,11,69,
  	12,69,465,1,69,1,69,4,69,470,8,69,11,69,12,69,471,1,70,1,70,1,70,1,70,
  	5,70,478,8,70,10,70,12,70,481,9,70,1,70,1,70,1,71,1,71,1,71,1,71,5,71,
  	489,8,71,10,71,12,71,492,9,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,
  	1,72,5,72,503,8,72,10,72,12,72,506,9,72,1,72,1,72,1,72,1,72,1,72,1,72,
  	1,73,4,73,515,8,73,11,73,12,73,516,1,73,1,73,1,74,1,74,2,490,504,0,75,
  	1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
  	29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
  	26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
  	75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
  	49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,
  	59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,
  	69,139,70,141,71,143,72,145,73,147,74,149,75,1,0,7,1,0,65,90,3,0,48,57,
  	65,90,95,95,4,0,48,57,65,90,95,95,97,122,3,0,65,90,95,95,97,122,1,0,48,
  	57,2,0,34,34,92,92,3,0,9,10,13,13,32,32,533,0,1,1,0,0,0,0,3,1,0,0,0,0,
  	5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
  	0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
  	0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
  	1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
  	0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
  	0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
  	1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
  	0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
  	0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
  	1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
  	1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,
  	1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,
  	1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,
  	1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,1,151,
  	1,0,0,0,3,157,1,0,0,0,5,165,1,0,0,0,7,172,1,0,0,0,9,180,1,0,0,0,11,186,
  	1,0,0,0,13,191,1,0,0,0,15,195,1,0,0,0,17,202,1,0,0,0,19,209,1,0,0,0,21,
  	214,1,0,0,0,23,221,1,0,0,0,25,226,1,0,0,0,27,233,1,0,0,0,29,236,1,0,0,
  	0,31,243,1,0,0,0,33,248,1,0,0,0,35,254,1,0,0,0,37,257,1,0,0,0,39,263,
  	1,0,0,0,41,272,1,0,0,0,43,276,1,0,0,0,45,279,1,0,0,0,47,286,1,0,0,0,49,
  	291,1,0,0,0,51,299,1,0,0,0,53,303,1,0,0,0,55,309,1,0,0,0,57,317,1,0,0,
  	0,59,323,1,0,0,0,61,330,1,0,0,0,63,337,1,0,0,0,65,342,1,0,0,0,67,349,
  	1,0,0,0,69,356,1,0,0,0,71,363,1,0,0,0,73,369,1,0,0,0,75,375,1,0,0,0,77,
  	377,1,0,0,0,79,380,1,0,0,0,81,383,1,0,0,0,83,386,1,0,0,0,85,389,1,0,0,
  	0,87,391,1,0,0,0,89,393,1,0,0,0,91,395,1,0,0,0,93,397,1,0,0,0,95,399,
  	1,0,0,0,97,402,1,0,0,0,99,404,1,0,0,0,101,406,1,0,0,0,103,409,1,0,0,0,
  	105,412,1,0,0,0,107,415,1,0,0,0,109,418,1,0,0,0,111,421,1,0,0,0,113,424,
  	1,0,0,0,115,426,1,0,0,0,117,428,1,0,0,0,119,430,1,0,0,0,121,432,1,0,0,
  	0,123,434,1,0,0,0,125,436,1,0,0,0,127,438,1,0,0,0,129,440,1,0,0,0,131,
  	442,1,0,0,0,133,444,1,0,0,0,135,455,1,0,0,0,137,458,1,0,0,0,139,463,1,
  	0,0,0,141,473,1,0,0,0,143,484,1,0,0,0,145,497,1,0,0,0,147,514,1,0,0,0,
  	149,520,1,0,0,0,151,152,5,99,0,0,152,153,5,108,0,0,153,154,5,97,0,0,154,
  	155,5,115,0,0,155,156,5,115,0,0,156,2,1,0,0,0,157,158,5,101,0,0,158,159,
  	5,120,0,0,159,160,5,116,0,0,160,161,5,101,0,0,161,162,5,110,0,0,162,163,
  	5,100,0,0,163,164,5,115,0,0,164,4,1,0,0,0,165,166,5,112,0,0,166,167,5,
  	117,0,0,167,168,5,98,0,0,168,169,5,108,0,0,169,170,5,105,0,0,170,171,
  	5,99,0,0,171,6,1,0,0,0,172,173,5,112,0,0,173,174,5,114,0,0,174,175,5,
  	105,0,0,175,176,5,118,0,0,176,177,5,97,0,0,177,178,5,116,0,0,178,179,
  	5,101,0,0,179,8,1,0,0,0,180,181,5,115,0,0,181,182,5,117,0,0,182,183,5,
  	112,0,0,183,184,5,101,0,0,184,185,5,114,0,0,185,10,1,0,0,0,186,187,5,
  	116,0,0,187,188,5,104,0,0,188,189,5,105,0,0,189,190,5,115,0,0,190,12,
  	1,0,0,0,191,192,5,110,0,0,192,193,5,101,0,0,193,194,5,119,0,0,194,14,
  	1,0,0,0,195,196,5,101,0,0,196,197,5,120,0,0,197,198,5,112,0,0,198,199,
  	5,111,0,0,199,200,5,114,0,0,200,201,5,116,0,0,201,16,1,0,0,0,202,203,
  	5,105,0,0,203,204,5,109,0,0,204,205,5,112,0,0,205,206,5,111,0,0,206,207,
  	5,114,0,0,207,208,5,116,0,0,208,18,1,0,0,0,209,210,5,102,0,0,210,211,
  	5,114,0,0,211,212,5,111,0,0,212,213,5,109,0,0,213,20,1,0,0,0,214,215,
  	5,115,0,0,215,216,5,116,0,0,216,217,5,114,0,0,217,218,5,117,0,0,218,219,
  	5,99,0,0,219,220,5,116,0,0,220,22,1,0,0,0,221,222,5,102,0,0,222,223,5,
  	117,0,0,223,224,5,110,0,0,224,225,5,99,0,0,225,24,1,0,0,0,226,227,5,114,
  	0,0,227,228,5,101,0,0,228,229,5,116,0,0,229,230,5,117,0,0,230,231,5,114,
  	0,0,231,232,5,110,0,0,232,26,1,0,0,0,233,234,5,105,0,0,234,235,5,102,
  	0,0,235,28,1,0,0,0,236,237,5,101,0,0,237,238,5,108,0,0,238,239,5,115,
  	0,0,239,240,5,101,0,0,240,241,5,105,0,0,241,242,5,102,0,0,242,30,1,0,
  	0,0,243,244,5,101,0,0,244,245,5,108,0,0,245,246,5,115,0,0,246,247,5,101,
  	0,0,247,32,1,0,0,0,248,249,5,119,0,0,249,250,5,104,0,0,250,251,5,105,
  	0,0,251,252,5,108,0,0,252,253,5,101,0,0,253,34,1,0,0,0,254,255,5,100,
  	0,0,255,256,5,111,0,0,256,36,1,0,0,0,257,258,5,98,0,0,258,259,5,114,0,
  	0,259,260,5,101,0,0,260,261,5,97,0,0,261,262,5,107,0,0,262,38,1,0,0,0,
  	263,264,5,99,0,0,264,265,5,111,0,0,265,266,5,110,0,0,266,267,5,116,0,
  	0,267,268,5,105,0,0,268,269,5,110,0,0,269,270,5,117,0,0,270,271,5,101,
  	0,0,271,40,1,0,0,0,272,273,5,102,0,0,273,274,5,111,0,0,274,275,5,114,
  	0,0,275,42,1,0,0,0,276,277,5,105,0,0,277,278,5,110,0,0,278,44,1,0,0,0,
  	279,280,5,115,0,0,280,281,5,119,0,0,281,282,5,105,0,0,282,283,5,116,0,
  	0,283,284,5,99,0,0,284,285,5,104,0,0,285,46,1,0,0,0,286,287,5,99,0,0,
  	287,288,5,97,0,0,288,289,5,115,0,0,289,290,5,101,0,0,290,48,1,0,0,0,291,
  	292,5,100,0,0,292,293,5,101,0,0,293,294,5,102,0,0,294,295,5,97,0,0,295,
  	296,5,117,0,0,296,297,5,108,0,0,297,298,5,116,0,0,298,50,1,0,0,0,299,
  	300,5,116,0,0,300,301,5,114,0,0,301,302,5,121,0,0,302,52,1,0,0,0,303,
  	304,5,99,0,0,304,305,5,97,0,0,305,306,5,116,0,0,306,307,5,99,0,0,307,
  	308,5,104,0,0,308,54,1,0,0,0,309,310,5,102,0,0,310,311,5,105,0,0,311,
  	312,5,110,0,0,312,313,5,97,0,0,313,314,5,108,0,0,314,315,5,108,0,0,315,
  	316,5,121,0,0,316,56,1,0,0,0,317,318,5,99,0,0,318,319,5,111,0,0,319,320,
  	5,110,0,0,320,321,5,115,0,0,321,322,5,116,0,0,322,58,1,0,0,0,323,324,
  	5,110,0,0,324,325,5,117,0,0,325,326,5,109,0,0,326,327,5,98,0,0,327,328,
  	5,101,0,0,328,329,5,114,0,0,329,60,1,0,0,0,330,331,5,115,0,0,331,332,
  	5,116,0,0,332,333,5,114,0,0,333,334,5,105,0,0,334,335,5,110,0,0,335,336,
  	5,103,0,0,336,62,1,0,0,0,337,338,5,98,0,0,338,339,5,111,0,0,339,340,5,
  	111,0,0,340,341,5,108,0,0,341,64,1,0,0,0,342,346,7,0,0,0,343,345,7,1,
  	0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,
  	66,1,0,0,0,348,346,1,0,0,0,349,353,7,0,0,0,350,352,7,2,0,0,351,350,1,
  	0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,68,1,0,0,0,
  	355,353,1,0,0,0,356,360,7,3,0,0,357,359,7,2,0,0,358,357,1,0,0,0,359,362,
  	1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,70,1,0,0,0,362,360,1,0,0,
  	0,363,364,5,112,0,0,364,365,5,114,0,0,365,366,5,105,0,0,366,367,5,110,
  	0,0,367,368,5,116,0,0,368,72,1,0,0,0,369,370,5,114,0,0,370,371,5,97,0,
  	0,371,372,5,110,0,0,372,373,5,103,0,0,373,374,5,101,0,0,374,74,1,0,0,
  	0,375,376,5,61,0,0,376,76,1,0,0,0,377,378,5,43,0,0,378,379,5,61,0,0,379,
  	78,1,0,0,0,380,381,5,45,0,0,381,382,5,61,0,0,382,80,1,0,0,0,383,384,5,
  	42,0,0,384,385,5,61,0,0,385,82,1,0,0,0,386,387,5,47,0,0,387,388,5,61,
  	0,0,388,84,1,0,0,0,389,390,5,43,0,0,390,86,1,0,0,0,391,392,5,45,0,0,392,
  	88,1,0,0,0,393,394,5,42,0,0,394,90,1,0,0,0,395,396,5,47,0,0,396,92,1,
  	0,0,0,397,398,5,37,0,0,398,94,1,0,0,0,399,400,5,42,0,0,400,401,5,42,0,
  	0,401,96,1,0,0,0,402,403,5,60,0,0,403,98,1,0,0,0,404,405,5,62,0,0,405,
  	100,1,0,0,0,406,407,5,60,0,0,407,408,5,61,0,0,408,102,1,0,0,0,409,410,
  	5,62,0,0,410,411,5,61,0,0,411,104,1,0,0,0,412,413,5,61,0,0,413,414,5,
  	61,0,0,414,106,1,0,0,0,415,416,5,33,0,0,416,417,5,61,0,0,417,108,1,0,
  	0,0,418,419,5,38,0,0,419,420,5,38,0,0,420,110,1,0,0,0,421,422,5,124,0,
  	0,422,423,5,124,0,0,423,112,1,0,0,0,424,425,5,33,0,0,425,114,1,0,0,0,
  	426,427,5,44,0,0,427,116,1,0,0,0,428,429,5,46,0,0,429,118,1,0,0,0,430,
  	431,5,59,0,0,431,120,1,0,0,0,432,433,5,58,0,0,433,122,1,0,0,0,434,435,
  	5,40,0,0,435,124,1,0,0,0,436,437,5,41,0,0,437,126,1,0,0,0,438,439,5,123,
  	0,0,439,128,1,0,0,0,440,441,5,125,0,0,441,130,1,0,0,0,442,443,5,91,0,
  	0,443,132,1,0,0,0,444,445,5,93,0,0,445,134,1,0,0,0,446,447,5,116,0,0,
  	447,448,5,114,0,0,448,449,5,117,0,0,449,456,5,101,0,0,450,451,5,102,0,
  	0,451,452,5,97,0,0,452,453,5,108,0,0,453,454,5,115,0,0,454,456,5,101,
  	0,0,455,446,1,0,0,0,455,450,1,0,0,0,456,136,1,0,0,0,457,459,7,4,0,0,458,
  	457,1,0,0,0,459,460,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,138,1,
  	0,0,0,462,464,7,4,0,0,463,462,1,0,0,0,464,465,1,0,0,0,465,463,1,0,0,0,
  	465,466,1,0,0,0,466,467,1,0,0,0,467,469,5,46,0,0,468,470,7,4,0,0,469,
  	468,1,0,0,0,470,471,1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,140,1,
  	0,0,0,473,479,5,34,0,0,474,478,8,5,0,0,475,476,5,92,0,0,476,478,9,0,0,
  	0,477,474,1,0,0,0,477,475,1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,0,479,
  	480,1,0,0,0,480,482,1,0,0,0,481,479,1,0,0,0,482,483,5,34,0,0,483,142,
  	1,0,0,0,484,485,5,47,0,0,485,486,5,47,0,0,486,490,1,0,0,0,487,489,9,0,
  	0,0,488,487,1,0,0,0,489,492,1,0,0,0,490,491,1,0,0,0,490,488,1,0,0,0,491,
  	493,1,0,0,0,492,490,1,0,0,0,493,494,5,10,0,0,494,495,1,0,0,0,495,496,
  	6,71,0,0,496,144,1,0,0,0,497,498,5,47,0,0,498,499,5,42,0,0,499,500,5,
  	42,0,0,500,504,1,0,0,0,501,503,9,0,0,0,502,501,1,0,0,0,503,506,1,0,0,
  	0,504,505,1,0,0,0,504,502,1,0,0,0,505,507,1,0,0,0,506,504,1,0,0,0,507,
  	508,5,42,0,0,508,509,5,42,0,0,509,510,5,47,0,0,510,511,1,0,0,0,511,512,
  	6,72,0,0,512,146,1,0,0,0,513,515,7,6,0,0,514,513,1,0,0,0,515,516,1,0,
  	0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,519,6,73,0,0,
  	519,148,1,0,0,0,520,521,9,0,0,0,521,150,1,0,0,0,13,0,346,353,360,455,
  	460,465,471,477,479,490,504,516,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  fluxlexerLexerStaticData = std::move(staticData);
}

}

FluxLexer::FluxLexer(CharStream *input) : Lexer(input) {
  FluxLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *fluxlexerLexerStaticData->atn, fluxlexerLexerStaticData->decisionToDFA, fluxlexerLexerStaticData->sharedContextCache);
}

FluxLexer::~FluxLexer() {
  delete _interpreter;
}

std::string FluxLexer::getGrammarFileName() const {
  return "FluxLexer.g4";
}

const std::vector<std::string>& FluxLexer::getRuleNames() const {
  return fluxlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& FluxLexer::getChannelNames() const {
  return fluxlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& FluxLexer::getModeNames() const {
  return fluxlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& FluxLexer::getVocabulary() const {
  return fluxlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FluxLexer::getSerializedATN() const {
  return fluxlexerLexerStaticData->serializedATN;
}

const atn::ATN& FluxLexer::getATN() const {
  return *fluxlexerLexerStaticData->atn;
}




void FluxLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  fluxlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(fluxlexerLexerOnceFlag, fluxlexerLexerInitialize);
#endif
}
