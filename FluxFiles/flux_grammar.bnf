<program> ::= <importDeclaration>* (<declaration> | <statement> | <funcCall>)* EOF

<declaration> ::= <constDeclaration>
                | <varDeclaration>
                | <funcDeclaration>
                | <classDeclaration>
                | <importDeclaration>
                | <exportDeclaration>

<importDeclaration> ::= 'from' IDENTIFIER 'import' <importList> ';'

<importList> ::= <importItem> (',' <importItem>)*

<importItem> ::= UPPERCASE_IDENTIFIER
               | CLASS_IDENTIFIER
               | IDENTIFIER

<exportDeclaration> ::= 'export' (<classDeclaration> | <funcDeclaration> | <constDeclaration>)

<classDeclaration> ::= 'class' CLASS_IDENTIFIER ('extends' CLASS_IDENTIFIER)? '{' (<publicBlock>)? (<privateBlock>)? '}'

<publicBlock> ::= 'public' '{' (<varDeclaration> | <constructorDeclaration> | <methodDeclaration>)* '}'

<privateBlock> ::= 'private' '{' (<varDeclaration> | <constructorDeclaration> | <methodDeclaration>)* '}'

<constructorDeclaration> ::= CLASS_IDENTIFIER '(' <paramList>? ')' '{' (<constructorInitStatement> | <assignmentStatement> | <superCall>)* '}'

<superCall> ::= 'super' '(' (<expr> (',' <expr>)*)? ')' ';'

<constructorInitStatement> ::= 'this' '.' IDENTIFIER '=' <expr> ';'

<methodDeclaration> ::= <type> 'func' IDENTIFIER '(' <paramList>? ')' <block>
                      | 'func' IDENTIFIER '(' <paramList>? ')' <block>

<constDeclaration> ::= 'const' <type> UPPERCASE_IDENTIFIER '=' (<expr> | <arrayLiteral>) ';'

<varDeclaration> ::= <type> IDENTIFIER ('=' (<expr> | <arrayLiteral>))? ';'
                   | <type> IDENTIFIER '=' 'new' CLASS_IDENTIFIER '(' (<expr> (',' <expr>)*)? ')' ';'

<statement> ::= <declaration>
              | <assignmentStatement>
              | <arrayAssignmentStatement>
              | <valueAccess>
              | <ifStatement>
              | <forStatement>
              | <whileStatement>
              | <doWhileStatement>
              | <breakStatement>
              | <continueStatement>
              | <returnStmt>
              | <block>
              | <expr> ';'

<whileStatement> ::= 'while' '(' <expr> ')' <block>

<doWhileStatement> ::= 'do' <block> 'while' '(' <expr> ')' ';'

<breakStatement> ::= 'break' ';'

<continueStatement> ::= 'continue' ';'

<forStatement> ::= 'for' '(' IDENTIFIER 'in' <forRange> ')' <block>

<forRange> ::= <rangeExpr>
             | <expr>

<rangeExpr> ::= 'range' '(' <expr> (',' <expr> (',' <expr>)?)? ')'

<builtInCall> ::= 'print' '(' <expr> ')' ';' | <rangeExpr>

<block> ::= '{' <statement>* '}'

<assignmentStatement> ::= IDENTIFIER '=' 'new' CLASS_IDENTIFIER '(' (<expr> (',' <expr>)*)? ')' ';'
                        | IDENTIFIER <assignOp> <expr> ';'
                        | 'this' '.' IDENTIFIER <assignOp> <expr> ';'

<arrayAssignmentStatement> ::= <arrayAccess> '=' <expr> ';'

<arrayLiteral> ::= '[' (<expr> (',' <expr>)*)? ']'

<arrayAccess> ::= IDENTIFIER '[' <expr> ']'
                | UPPERCASE_IDENTIFIER '[' <expr> ']'

<ifStatement> ::= 'if' '(' <expr> ')' <block> ('elseif' '(' <expr> ')' <block>)* ('else' <block>)?

<valueAccess> ::= IDENTIFIER '.' (<funcCall> | IDENTIFIER )?

<expr> ::= <expr> <arithmeticOp> <term>
          | <expr> <compareOp> <term>
          | <expr> <logicalOp> <term>
          | <notExpr>
          | <term>

<arithmeticOp> ::= '+'
                 | '-'
                 | '*'
                 | '/'
                 | '**'
                 | '%'

<compareOp> ::= '=='
               | '!='
               | '>='
               | '<='
               | '>'
               | '<'

<logicalOp> ::= 'and' | 'or'

<assignOp> ::= '='
              | '+='
              | '-='
              | '*='
              | '/='

<notExpr> ::= '!' <expr>

<classInstantiation> ::= CLASS_IDENTIFIER '(' (<expr> (',' <expr>)*)? ')'

<term> ::= <factor>
          | 'this' ('.' IDENTIFIER)?

<factor> ::= BOOL_LIT
           | DECIMAL_LIT
           | INT_LIT
           | STRING_LIT
           | IDENTIFIER
           | <funcCall>
           | <arrayAccess>
           | <builtInCall>
           | <classInstantiation>
           | '(' <expr> ')'

<funcDeclaration> ::= <type> 'func' IDENTIFIER '(' <paramList>? ')' <block>
                    | 'func' IDENTIFIER '(' <paramList>? ')' <block>

<funcCall> ::= IDENTIFIER '(' (<expr> (',' <expr>)*)? ')'

<paramList> ::= <param> (',' <param>)*

<param> ::= <type> IDENTIFIER

<returnStmt> ::= 'return' <expr>? ';'

<type> ::= 'number'
         | 'string'
         | 'bool'
         | CLASS_IDENTIFIER


BOOL_LIT ::= 'true' | 'false'
DECIMAL_LIT ::= <digit>+ '.' <digit>+
INT_LIT ::= <digit>+
<digit> ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

STRING_LIT ::= '"' <char>* '"'
IDENTIFIER ::= <letter_or_underscore> <letter_or_digit_or_underscore>*
UPPERCASE_IDENTIFIER ::= <uppercase_letter> <uppercase_letter_or_digit_or_underscore>
CLASS_IDENTIFIER ::= <uppercase_letter> <letter_or_digit_or_underscore>*

<letter> ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | <uppercase_letter>
<uppercase_letter> ::= 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'
<special_char> ::= "!" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | "\\" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "["  | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~"
<escape_sequence> ::= '\\"' | '\\\\' | '\\n' | '\\t' | '\\r'
<printable> ::= <letter> | <digit> | <special_char>
<char> ::= <printable> | ' ' | <escape_sequence>

<letter_or_underscore> ::= <letter> | '_'
<letter_or_digit_or_underscore> ::= <letter> | <digit> | '_'
<uppercase_letter_or_digit_or_underscore> ::= <uppercase_letter> | <digit> | '_'
